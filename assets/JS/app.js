// Set Variables
const canvas = document.getElementById("myCanvas");
const ctx = canvas.getContext("2d");
let x = canvas.width/2;
let y = canvas.height-30;
let dx = Math.random() * 3;
let dy = Math.random() * -3;
let ballRadius = 5;
let pbW = 30;
let pbH = 5;
let pbX = 150;
let pbY = canvas.height-pbH;
let movement = 2;
let rightButton = false; 
let leftButton = false;
let px = document.getElementById('paragraphX');
let py = document.getElementById('paragraphY');

// functions to redefine text within the paragraphs
let xTrack = () =>{px.innerHTML = 'X = ' +  x;}
let yTrack = () =>{py.innerHTML = 'Y = ' +  y;}
let draw = () => {



            // create the ball
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.arc(x, y, ballRadius, 0, Math.PI*2);
            ctx.fillStyle = "red";
            ctx.fill();
            ctx.closePath();
            x += dx;    
            y += dy;
            
                    // Actual bouncing effects is generated by the statements below. 
                    // loop below is set to change the dy variable when the Y variable reaches ballradius value
                    if(y + dy  < ballRadius || y + dy > canvas.height-ballRadius){
                        // dy becomes positive or negative thus redirecting the drawing
                        dy = -dy; 
                    }

                    // if(y > canvas.height-ballRadius){
                    //     clearInterval(path);
                    // }

                    // redefines dx variable when x variable reaches ballradius value or canvas width minus ballradius value
                    if(x + dx < ballRadius || x >= canvas.width-ballRadius){
                        dx = -dx; 
                    }

                        // attempt to bounce ball off of paddleboard  
                    if(y + dy > canvas.height-pbH){
                        dy = -dy; 
                    }
                // Function triggering paddleboard drawing  
                paddleBoard();
                
        }

        

    // paddleboard drawing 

    let paddleBoard = () => {
        
                    ctx.beginPath();
                    ctx.rect(pbX, canvas.height-pbH, pbW, pbH);
                    ctx.fillStyle = '#fff';
                    ctx.fill();
                    ctx.closePath();


            }


            //  Key functionality. Keys are defaulted to false boolean values // 
            
            
            let Down = (event) =>{
                    // record key pressed to 'key' variable 
                    const key = event.key.toLowerCase();

                    // loops to determine what to do when right or left keys are pressed 

                    if(key === 'arrowright'){
                        pbX += 10;
                    }

                    if(key === 'arrowleft'){
                        pbX -= 10;
                }
            }


                                                                                        // ********************************************
            // function below defaults key boolean values back to false after released. ***********No use for this function as of  yet**********
            //                                                                             // ********************************************
            // let Up = (event) =>{
            //         if(event.key.toLowerCase() === 'arrowleft' || event.key.toLowerCase() === 'left'){
            //             leftButton = false;
            //         }
            //         if(event.key.toLowerCase() === 'arrowright' || event.key.toLowerCase() === 'light'){
            //             rightButton = false;
            //         }
            // }



// const keyState = (event) => { 
//     if(event.keyState = 39){
//         return rightButton = true; 
//     }
//     if(event.keyState = 37){
//         return leftButton = true;
//     }
// }



// *************************** TO-DO *****************************
// Keep paddle board from escaping canvas viewport****************
// Add bounce logic for paddleBoard********************************
// Set bottom of canvas back to clearInterval() and set a game over screen************************
// Create Blocks and add logic*************************************
// Style the canvas and main body**********************************










// Event listener set to document to track when key is pressed down 
document.addEventListener('keydown', Down);

// Below are the functions defined above with set Intervals at which the functions will continue to rn.
let path = setInterval(draw, 10);
let trackX = setInterval(xTrack,10);
let trackY = setInterval(yTrack,10);

























